{"ast":null,"code":"import { React, useEffect } from 'react';\nimport * as THREE from 'three';\nexport default function Threejs() {\n  let camera, scene, renderer;\n  init();\n  animate();\n\n  function init() {\n    const container = document.createElement('div');\n    document.body.appendChild(container);\n    camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 10000);\n    camera.position.z = 200;\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xffffff);\n    renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    container.appendChild(renderer.domElement);\n  }\n\n  function createImage() {\n    const canvas = document.createElement('canvas');\n    canvas.width = 256;\n    canvas.height = 256;\n    const context = canvas.getContext('2d');\n    context.fillStyle = 'rgb(' + Math.floor(Math.random() * 256) + ',' + Math.floor(Math.random() * 256) + ',' + Math.floor(Math.random() * 256) + ')';\n    context.fillRect(0, 0, 256, 256);\n    return canvas;\n  } //\n\n\n  function animate() {\n    requestAnimationFrame(animate);\n    render();\n  }\n\n  function render() {\n    const geometry = new THREE.SphereGeometry(50, Math.random() * 64, Math.random() * 32);\n    const texture = new THREE.CanvasTexture(createImage());\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      wireframe: true\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n    renderer.render(scene, camera);\n    scene.remove(mesh); // clean up\n\n    geometry.dispose();\n    material.dispose();\n    texture.dispose();\n  }\n\n  return null;\n}\n_c = Threejs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Threejs\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-learn/portfolio_site/site/src/components/Threejs.js"],"names":["React","useEffect","THREE","Threejs","camera","scene","renderer","init","animate","container","document","createElement","body","appendChild","PerspectiveCamera","window","innerWidth","innerHeight","position","z","Scene","background","Color","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","domElement","createImage","canvas","width","height","context","getContext","fillStyle","Math","floor","random","fillRect","requestAnimationFrame","render","geometry","SphereGeometry","texture","CanvasTexture","material","MeshBasicMaterial","map","wireframe","mesh","Mesh","add","remove","dispose"],"mappings":"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","sourcesContent":["\nimport {React, useEffect} from 'react'\nimport * as THREE from 'three';\n\nexport default function Threejs(){\n\n\t\n\n\tlet camera, scene, renderer;\n\n\tinit();\n\tanimate();\n\n\tfunction init() {\n\n\t\tconst container = document.createElement( 'div' );\n\t\tdocument.body.appendChild( container );\n\n\t\tcamera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 10000 );\n\t\tcamera.position.z = 200;\n\n\t\tscene = new THREE.Scene();\n\t\tscene.background = new THREE.Color( 0xffffff );\n\n\t\trenderer = new THREE.WebGLRenderer();\n\t\trenderer.setPixelRatio( window.devicePixelRatio );\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\tcontainer.appendChild( renderer.domElement );\n\n\t}\n\n\tfunction createImage() {\n\n\t\tconst canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = 256;\n\t\tcanvas.height = 256;\n\n\t\tconst context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'rgb(' + Math.floor( Math.random() * 256 ) + ',' + Math.floor( Math.random() * 256 ) + ',' + Math.floor( Math.random() * 256 ) + ')';\n\t\tcontext.fillRect( 0, 0, 256, 256 );\n\n\t\treturn canvas;\n\n\t}\n\n\t//\n\n\tfunction animate() {\n\n\t\trequestAnimationFrame( animate );\n\n\t\trender();\n\n\t}\n\n\tfunction render() {\n\n\t\tconst geometry = new THREE.SphereGeometry( 50, Math.random() * 64, Math.random() * 32 );\n\n\t\tconst texture = new THREE.CanvasTexture( createImage() );\n\n\t\tconst material = new THREE.MeshBasicMaterial( { map: texture, wireframe: true } );\n\n\t\tconst mesh = new THREE.Mesh( geometry, material );\n\n\t\tscene.add( mesh );\n\n\t\trenderer.render( scene, camera );\n\n\t\tscene.remove( mesh );\n\n\t\t// clean up\n\n\t\tgeometry.dispose();\n\t\tmaterial.dispose();\n\t\ttexture.dispose();\n\n\t}\n\n\nreturn(\n   null\n)\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}