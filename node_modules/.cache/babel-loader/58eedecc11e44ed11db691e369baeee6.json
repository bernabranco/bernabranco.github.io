{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { React, useEffect } from 'react';\nimport * as THREE from 'three';\nexport default function Threejs() {\n  _s();\n\n  //create scene and camera\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 0.1, 1000);\n  camera.position.z = 1; //create render, canvas and add canvas to dom\n\n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n  const material = new THREE.ShaderMaterial({\n    uniforms: {\n      time: {\n        value: 1.0\n      },\n      resolution: {\n        value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n      },\n      mousex: {\n        value: 0\n      },\n      mousey: {\n        value: 0\n      }\n    },\n    vertexShader: document.getElementById('vertexShader').textContent,\n    fragmentShader: document.getElementById('fragmentShader').textContent\n  });\n  const geometry = new THREE.PlaneGeometry(5, 10, 1);\n  const mesh = new THREE.Mesh(geometry, material);\n  scene.add(mesh);\n\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera); //define shader time\n\n    material.uniforms.time.value += 0.05;\n  }\n\n  ;\n  animate();\n  geometry.dispose();\n  material.dispose();\n  renderer.clear();\n  renderer.dispose();\n  mesh.clear();\n  camera.remove();\n  mesh.remove();\n  useEffect(() => {\n    //mouse animate shader\n    window.addEventListener(\"mousemove\", shaderAnimate);\n\n    function shaderAnimate(e) {\n      const canvas = document.querySelector(\"canvas\");\n\n      if (e.pageX >= canvas.getBoundingClientRect().left) {\n        material.uniforms.mousex.value = e.pageX * 0.001;\n        material.uniforms.mousey.value = e.pageY * 0.001;\n      }\n    } // //mouse rotates shader\n    // window.addEventListener(\"mousemove\", mouseAnimate);\n    //map values method\n\n\n    function map_range(value, low1, high1, low2, high2) {\n      return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    } // function mouseAnimate(e){\n    // \tvar mouse = new THREE.Vector2(e.pageX, e.pageY);\n    // \tvar xoffset = map_range(mouse.x,0,window.innerWidth, -2*3.14, 2*3.14);\n    // \tvar yoffset = map_range(mouse.y,0,window.innerHeight, -2*3.14, 2*3.14);\n    // \tmesh.rotation.x += yoffset*0.02;\n    // \tmesh.rotation.y += xoffset*0.02;\n    // }\n\n\n    window.addEventListener('resize', () => handleResize());\n\n    function handleResize() {\n      console.log('entrou'); // Update camera\n\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix(); // Update renderer\n\n      renderer.setSize(window.innerWidth, window.innerHeight); //use 1 to avoid resize lag on shader\n      //renderer.setPixelRatio(Math.min(window.devicePixelRatio),1.0);\n    }\n\n    animate();\n    return () => {\n      cancelAnimationFrame(animate);\n      window.removeEventListener(\"mousemove\", shaderAnimate);\n      window.removeEventListener('resize', handleResize);\n      material.dispose();\n      geometry.dispose();\n      mesh.geometry.dispose();\n      mesh.material.dispose();\n      mesh.clear();\n      scene.remove(mesh);\n      scene.clear();\n      scene.dispose();\n      renderer.clear();\n      renderer.dispose();\n      document.body.removeChild(renderer.domElement);\n    };\n  });\n  return null;\n}\n\n_s(Threejs, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Threejs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Threejs\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-learn/portfolio_site/site/src/components/Threejs.js"],"names":["React","useEffect","THREE","Threejs","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","material","ShaderMaterial","uniforms","time","value","resolution","Vector2","mousex","mousey","vertexShader","getElementById","textContent","fragmentShader","geometry","PlaneGeometry","mesh","Mesh","add","animate","requestAnimationFrame","render","dispose","clear","remove","addEventListener","shaderAnimate","e","canvas","querySelector","pageX","getBoundingClientRect","left","pageY","map_range","low1","high1","low2","high2","handleResize","console","log","aspect","updateProjectionMatrix","cancelAnimationFrame","removeEventListener","removeChild"],"mappings":"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","sourcesContent":["\nimport {React, useEffect} from 'react'\nimport * as THREE from 'three';\n\nexport default function Threejs(){\n\n\t\t//create scene and camera\n\t\tconst scene = new THREE.Scene();\n\t\tconst camera = new THREE.PerspectiveCamera( 100, window.innerWidth / window.innerHeight, 0.1, 1000 );\n\t\tcamera.position.z = 1;\n\n\t\t//create render, canvas and add canvas to dom\n\t\tconst renderer = new THREE.WebGLRenderer();\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\tdocument.body.appendChild( renderer.domElement );\n\n\t\tconst material = new THREE.ShaderMaterial( \n\t\t\t{\t   \n\t\t\tuniforms: {\n\t\t\t  time: { value: 1.0 },\n\t\t\t  resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n\t\t\t  mousex: {value: 0},\n\t\t\t mousey: {value:0}\n\t\t\t},\n\t\t\tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n\t\t\tfragmentShader: document.getElementById( 'fragmentShader' ).textContent\n\t\t\t} \n\t\t);\n\t\t\n\t\t\n\t\tconst geometry = new THREE.PlaneGeometry(5,10,1);\n\t\tconst mesh = new THREE.Mesh( geometry, material );\n\t\tscene.add(mesh);\n\n\t\tfunction animate() {\n\t\t\trequestAnimationFrame( animate );\n\t\t\trenderer.render( scene, camera );\n\n\t\t\t//define shader time\n\t\t\tmaterial.uniforms.time.value += 0.05;\t\n\t};\n\n\tanimate();\n\n\t\n\t\tgeometry.dispose();\n\t\tmaterial.dispose();\n\t\trenderer.clear();\n\t\trenderer.dispose();\n\t\tmesh.clear();\n\t\tcamera.remove();\n\t\tmesh.remove();\n\nuseEffect(() => {\n\t\t\n\t\t\t//mouse animate shader\n\t\t\twindow.addEventListener(\"mousemove\", shaderAnimate);\n\n\t\t\tfunction shaderAnimate(e){\n\t\t\t\tconst canvas = document.querySelector(\"canvas\");\n\t\t\t\tif (e.pageX >= canvas.getBoundingClientRect().left){\n\t\t\t\t\tmaterial.uniforms.mousex.value = e.pageX*0.001;\n\t\t\t\t\tmaterial.uniforms.mousey.value = e.pageY*0.001;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// //mouse rotates shader\n\t\t\t// window.addEventListener(\"mousemove\", mouseAnimate);\n\n\t\t\t//map values method\n\t\t\tfunction map_range(value, low1, high1, low2, high2) {\n\t\t\t\treturn low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n\t\t\t}\n\n\t\t\t// function mouseAnimate(e){\n\t\t\t// \tvar mouse = new THREE.Vector2(e.pageX, e.pageY);\n\t\t\t// \tvar xoffset = map_range(mouse.x,0,window.innerWidth, -2*3.14, 2*3.14);\n\t\t\t// \tvar yoffset = map_range(mouse.y,0,window.innerHeight, -2*3.14, 2*3.14);\n\t\t\t\t\n\t\t\t// \tmesh.rotation.x += yoffset*0.02;\n\t\t\t// \tmesh.rotation.y += xoffset*0.02;\n\t\t\t// }\n\t\t\t\n\n\t  window.addEventListener('resize', ()=>handleResize());\n\n      function handleResize(){\n\t\t\t\n\t\t   console.log('entrou');\n\t\t\t// Update camera\n\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t// Update renderer\n\t\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\t//use 1 to avoid resize lag on shader\n\t\t\t//renderer.setPixelRatio(Math.min(window.devicePixelRatio),1.0);\n\t\t\t}\n\t\t\n\n\t\tanimate();\n\n        return () => {\n\t\t\tcancelAnimationFrame(animate);\n\t\t\twindow.removeEventListener(\"mousemove\", shaderAnimate);\n\t\t\twindow.removeEventListener('resize',handleResize);\n\t\t\tmaterial.dispose();\n\t\t\tgeometry.dispose();\t\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\tmesh.clear();\n\t\t\tscene.remove( mesh );\n\t\t\tscene.clear();\n\t\t\tscene.dispose();\n\t\t\trenderer.clear();\n\t\t\trenderer.dispose();\n\n\t\t\t\n\t\t\t\n\t\t\tdocument.body.removeChild(renderer.domElement);\t\n        }\n      });\n\nreturn(\n   null\n)\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}