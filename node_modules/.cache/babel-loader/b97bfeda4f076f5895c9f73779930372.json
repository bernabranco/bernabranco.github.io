{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { React, useEffect } from 'react';\nimport * as THREE from 'three';\nexport default function Threejs() {\n  _s();\n\n  useEffect(() => {\n    //setup threejs elements\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const canvas = document.querySelector('#c');\n    console.log(canvas);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    const resize = () => {\n      //resize canvas\n      window.addEventListener('resize', () => {\n        // Update camera\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix(); // Update renderer\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      });\n    };\n\n    animate();\n    resize();\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n  return null;\n}\n\n_s(Threejs, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Threejs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Threejs\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-learn/portfolio_site/site/src/components/Threejs.js"],"names":["React","useEffect","THREE","Threejs","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","canvas","document","querySelector","console","log","renderer","WebGLRenderer","setSize","body","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","resize","addEventListener","aspect","updateProjectionMatrix","setPixelRatio","Math","min","devicePixelRatio","removeChild"],"mappings":";;AACA,SAAQA,KAAR,EAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,OAAT,GAAkB;AAAA;;AAEjCF,EAAAA,SAAS,CAAC,MAAM;AAER;AACA,UAAMG,KAAK,GAAG,IAAIF,KAAK,CAACG,KAAV,EAAd;AACA,UAAMC,MAAM,GAAG,IAAIJ,KAAK,CAACK,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAf;AACA,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAAf;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,UAAMK,QAAQ,GAAG,IAAId,KAAK,CAACe,aAAV,EAAjB;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBV,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C;AACAE,IAAAA,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA2BJ,QAAQ,CAACK,UAApC;AACA,UAAMC,QAAQ,GAAG,IAAIpB,KAAK,CAACqB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAjB;AACA,UAAMC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAjB;AACA,UAAMC,IAAI,GAAG,IAAIzB,KAAK,CAAC0B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAb;AACApB,IAAAA,KAAK,CAACyB,GAAN,CAAWF,IAAX;AACArB,IAAAA,MAAM,CAACwB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AAEA,UAAMC,OAAO,GAAG,MAAM;AACpBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAL,MAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,MAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACApB,MAAAA,QAAQ,CAACqB,MAAT,CAAiBjC,KAAjB,EAAwBE,MAAxB;AACD,KALD;;AAOA,UAAMgC,MAAM,GAAG,MAAM;AAC1B;AACA9B,MAAAA,MAAM,CAAC+B,gBAAP,CAAwB,QAAxB,EAAkC,MAClC;AACA;AACAjC,QAAAA,MAAM,CAACkC,MAAP,GAAgBhC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA3C;AACAJ,QAAAA,MAAM,CAACmC,sBAAP,GAHA,CAKA;;AACAzB,QAAAA,QAAQ,CAACE,OAAT,CAAiBV,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;AACAM,QAAAA,QAAQ,CAAC0B,aAAT,CAAuBC,IAAI,CAACC,GAAL,CAASpC,MAAM,CAACqC,gBAAhB,EAAkC,CAAlC,CAAvB;AACC,OATD;AAUM,KAZD;;AAcAb,IAAAA,OAAO;AACPM,IAAAA,MAAM;AAEN,WAAO,MAAM;AACT1B,MAAAA,QAAQ,CAACO,IAAT,CAAc2B,WAAd,CAA0B9B,QAAQ,CAACK,UAAnC;AACH,KAFD;AAID,GA7CE,EA6CD,EA7CC,CAAT;AA+CA,SACG,IADH;AAIC;;GArDuBlB,O;;KAAAA,O","sourcesContent":["\nimport {React, useEffect} from 'react'\nimport * as THREE from 'three';\n\nexport default function Threejs(){\n\nuseEffect(() => {\n        \n        //setup threejs elements\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n        const canvas = document.querySelector('#c');\n\n        console.log(canvas);\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        document.body.appendChild( renderer.domElement );\n        const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n        const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n        const cube = new THREE.Mesh( geometry, material );\n        scene.add( cube );\n        camera.position.z = 5;\n\n        const animate = () => {\n          requestAnimationFrame( animate );\n          cube.rotation.x += 0.01;\n          cube.rotation.y += 0.01;\n          renderer.render( scene, camera );\n        };\n\n        const resize = () => {\n\t\t\t//resize canvas\n\t\t\twindow.addEventListener('resize', () =>\n\t\t\t{\n\t\t\t// Update camera\n\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t// Update renderer\n\t\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\t\t\t})\n        }\n        \n        animate();\n        resize();\n\n        return () => {\n            document.body.removeChild(renderer.domElement);\n        }\n\n      },[]);\n\nreturn(\n   null\n)\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}