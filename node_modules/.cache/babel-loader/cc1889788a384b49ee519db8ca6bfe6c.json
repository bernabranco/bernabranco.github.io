{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { React, useEffect } from 'react';\nimport * as THREE from 'three';\nexport default function Threejs() {\n  _s();\n\n  useEffect(() => {\n    const my_canvas = document.querySelector('#c');\n    const renderer = new THREE.WebGLRenderer(); //setup threejs elements\n\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x00000);\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    console.log(scene);\n    renderer.setSize(window.innerWidth / 10, window.innerHeight / 10);\n    document.body.appendChild(renderer.domElement);\n    const geometry = new THREE.BoxGeometry(4, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    const resize = () => {\n      //resize canvas\n      window.addEventListener('resize', () => {\n        // Update camera\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix(); // Update renderer\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      });\n    };\n\n    animate();\n    resize();\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n  return null;\n}\n\n_s(Threejs, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Threejs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Threejs\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-learn/portfolio_site/site/src/components/Threejs.js"],"names":["React","useEffect","THREE","Threejs","my_canvas","document","querySelector","renderer","WebGLRenderer","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","console","log","setSize","body","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","resize","addEventListener","aspect","updateProjectionMatrix","setPixelRatio","Math","min","devicePixelRatio","removeChild"],"mappings":";;AACA,SAAQA,KAAR,EAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,OAAT,GAAkB;AAAA;;AAEjCF,EAAAA,SAAS,CAAC,MAAM;AAER,UAAMG,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAAlB;AACA,UAAMC,QAAQ,GAAG,IAAIL,KAAK,CAACM,aAAV,EAAjB,CAHQ,CAKR;;AACA,UAAMC,KAAK,GAAG,IAAIP,KAAK,CAACQ,KAAV,EAAd;AACAD,IAAAA,KAAK,CAACE,UAAN,GAAmB,IAAIT,KAAK,CAACU,KAAV,CAAiB,OAAjB,CAAnB;AACA,UAAMC,MAAM,GAAG,IAAIX,KAAK,CAACY,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAf;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AAEAF,IAAAA,QAAQ,CAACa,OAAT,CAAkBL,MAAM,CAACC,UAAP,GAAkB,EAApC,EAAwCD,MAAM,CAACE,WAAP,GAAmB,EAA3D;AACAZ,IAAAA,QAAQ,CAACgB,IAAT,CAAcC,WAAd,CAA2Bf,QAAQ,CAACgB,UAApC;AACA,UAAMC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAjB;AACA,UAAMC,QAAQ,GAAG,IAAIxB,KAAK,CAACyB,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAjB;AACA,UAAMC,IAAI,GAAG,IAAI3B,KAAK,CAAC4B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAb;AACAjB,IAAAA,KAAK,CAACsB,GAAN,CAAWF,IAAX;AACAhB,IAAAA,MAAM,CAACmB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AAEA,UAAMC,OAAO,GAAG,MAAM;AACpBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAL,MAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,MAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACA/B,MAAAA,QAAQ,CAACgC,MAAT,CAAiB9B,KAAjB,EAAwBI,MAAxB;AACD,KALD;;AAOA,UAAM2B,MAAM,GAAG,MAAM;AAC1B;AACAzB,MAAAA,MAAM,CAAC0B,gBAAP,CAAwB,QAAxB,EAAkC,MAClC;AACA;AACA5B,QAAAA,MAAM,CAAC6B,MAAP,GAAgB3B,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA3C;AACAJ,QAAAA,MAAM,CAAC8B,sBAAP,GAHA,CAKA;;AACApC,QAAAA,QAAQ,CAACa,OAAT,CAAiBL,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;AACAV,QAAAA,QAAQ,CAACqC,aAAT,CAAuBC,IAAI,CAACC,GAAL,CAAS/B,MAAM,CAACgC,gBAAhB,EAAkC,CAAlC,CAAvB;AACC,OATD;AAUM,KAZD;;AAcAb,IAAAA,OAAO;AACPM,IAAAA,MAAM;AAEN,WAAO,MAAM;AACTnC,MAAAA,QAAQ,CAACgB,IAAT,CAAc2B,WAAd,CAA0BzC,QAAQ,CAACgB,UAAnC;AACH,KAFD;AAID,GAhDE,EAgDD,EAhDC,CAAT;AAkDA,SACG,IADH;AAIC;;GAxDuBpB,O;;KAAAA,O","sourcesContent":["\nimport {React, useEffect} from 'react'\nimport * as THREE from 'three';\n\nexport default function Threejs(){\n\nuseEffect(() => {\n  \n        const my_canvas = document.querySelector('#c');\n        const renderer = new THREE.WebGLRenderer();\n        \n        //setup threejs elements\n        const scene = new THREE.Scene();\n        scene.background = new THREE.Color( 0x00000 );\n        const camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n\n        console.log(scene);\n\n        renderer.setSize( window.innerWidth/10, window.innerHeight/10 );\n        document.body.appendChild( renderer.domElement );\n        const geometry = new THREE.BoxGeometry( 4, 1, 1 );\n        const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n        const cube = new THREE.Mesh( geometry, material );\n        scene.add( cube );\n        camera.position.z = 5;\n\n        const animate = () => {\n          requestAnimationFrame( animate );\n          cube.rotation.x += 0.01;\n          cube.rotation.y += 0.01;\n          renderer.render( scene, camera );\n        };\n\n        const resize = () => {\n\t\t\t//resize canvas\n\t\t\twindow.addEventListener('resize', () =>\n\t\t\t{\n\t\t\t// Update camera\n\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t// Update renderer\n\t\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\t\t\t})\n        }\n        \n        animate();\n        resize();\n\n        return () => {\n            document.body.removeChild(renderer.domElement);\n        }\n\n      },[]);\n\nreturn(\n   null\n)\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}